import cv2
import numpy as np
from os import listdir
from os.path import isfile, join
import os
import threading
face_classifier = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')
person_saved_model = cv2.face_LBPHFaceRecognizer.create()
person_saved_model.read('./models/person_model.yml')

import cv2, numpy, os
face_classifier=cv2.CascadeClassifier("haarcascade_frontalface_default.xml")

def face_detector(img,size=0.5):
    
    # Convert image to grayscale
    gray=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
    faces=face_classifier.detectMultiScale(gray,scaleFactor=1.3, minNeighbors=5)
    if faces is ():
        return img, []
    
    for (x,y,w,h) in faces:
        cv2.rectangle(img,(x,y),(x+w,y+h),(0,255,255),2)
        roi=img[y:y+h,x:x+w]
        roi=cv2.resize(roi,(200,200))
    return img, roi
    
    
    import numpy as np
import os
import pywhatkit as kitkat
from datetime import date
from datetime import datetime

time = datetime.now()
date = date.today()


face_classifier = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')

def face_detector(img, size=0.5):
    
    # Convert image to grayscale
    gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
    faces = face_classifier.detectMultiScale(gray, 1.3, 5)
    if faces is ():
        return img, []
    
    
    for (x,y,w,h) in faces:
        cv2.rectangle(img,(x,y),(x+w,y+h),(0,255,255),2)
        roi = img[y:y+h, x:x+w]
        roi = cv2.resize(roi, (200, 200))
    return img, roi


# WEBCAM INITIALIZATION
cap = cv2.VideoCapture(0)

while True:

    ret, frame = cap.read()
    
    image, face = face_detector(frame)
    
    
    try:
        face = cv2.cvtColor(face, cv2.COLOR_BGR2GRAY)
        results = person_saved_model.predict(face)
        
        
        if results[1] < 500:
            confidence = int( 100 * (1 - (results[1])/400) )
            display_string = str(confidence) + '% FACE MATCHING to yuvraj!!!'
            cv2.putText(image, display_string, (50, 100), cv2.FONT_HERSHEY_COMPLEX, 1, (0, 255,0), 2)
        
        #IF CONFIDENCE SCORE WILL BE MORE THAN 90% EMAIL AND WHATSAPP MESSAGE BOTH WILL BE SEND.
        if confidence > 80:
            cv2.putText(image, "FACE MATCHED!!!", (100, 450), cv2.FONT_HERSHEY_COMPLEX, 1, (0,255,0), 2)
            cv2.imshow('FACE RECOGNITION', image)
            kit.sendwhatmsg_instantly('+917004406676','yuvraj face detected  this message is computer generated !!!')
            print("WHATSAPP MESSAGE SENT!!!")
            sender_email = "yuvraj.summerintenship@gmail.com"
            rec_email = "yuvraj15160@gmail.com"
            password = "fortask@6"
            message = "yuvraj face dedected at", + time , +date 

            server = smtplib.SMTP('smtp.gmail.com', 587)
            server.starttls()
            server.login(sender_email, password)
            print("Login success")
            server.sendmail(sender_email, rec_email, message)
            print("Email has been sent to ", rec_email)
       
            
        else:
            #cv2.putText(image, "FACE IS NOT MATCHING by 90%!!!", (100, 450), cv2.FONT_HERSHEY_COMPLEX, 1, (255,0,0), 2)
            cv2.imshow('FACE RECOGNITION', image )

    except:
        #cv2.putText(image, "FACE DOESN'T FOUND!!!", (50, 100) , cv2.FONT_HERSHEY_COMPLEX, 1, (255,0,0), 2)
        cv2.putText(image, "PlEASE LOOK AT CAMERA!!!", (50, 450), cv2.FONT_HERSHEY_COMPLEX, 1, (255,0,0), 2)
        #cv2.imshow('FACE RECOGNITION', image)
        pass
        
    if cv2.waitKey(1) == 13:
        break
        
cap.release()
cv2.destroyAllWindows()
